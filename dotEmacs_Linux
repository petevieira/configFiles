;; =============================================================================
;; Emacs Configuration File
;;
;; This file is a configuration file for Mac OS X GNU Emacs (> Version 24.1)
;;
;; HARD LINK LOCATIONS:
;;     ~/.emacs
;;     ~/Dropbox/SystemConfigFiles/dotEmacs
;;
;; AUTHOR:
;;     08/03/2012 - Rowland O'Flaherty (rowlandoflaherty.com)
;; =============================================================================



;; =============================================================================
;; Setting Path
;; =============================================================================

;; Add to path
;;(push "~/.emacs.d/" load-path)

;; Read in PATH from .profile
;;(if (not (getenv "TERM_PROGRAM"))
;;    (setenv "PATH" (shell-command-to-string "source $HOME/.profile && printf $PATH")))
;;    (setenv "PATH" (concat "/opt/local/bin:" (getenv "PATH")))
;;    (setenv "PATH" (concat "/usr/texbin:" (getenv "PATH")))


;; =============================================================================
;; GUI Emacs config
;; =============================================================================

;; Prevent Emacs from create backup files with a tilde
(setq make-backup-files nil)

;; Turn off splash screen
(setq inhibit-splash-screen t)

;; Turn off toolbar
(tool-bar-mode -1)

;; Turn off beep
(defun my-bell-function ()
  (unless (memq this-command
    	'(isearch-abort abort-recursive-edit exit-minibuffer
              keyboard-quit mwheel-scroll down up next-line previous-line
              backward-char forward-char))
    (ding)))
(setq ring-bell-function 'my-bell-function)

;; Apple config
;;(setq mac-option-modifier 'meta)

;; ;; Set window defaults
;; (setq default-frame-alist
;;       '((top . 0) (left . 0)
;;         (width . 96) (height . 74)
;;         (cursor-color . "black")
;;         (cursor-type . box)
;;         (foreground-color . "black")
;;         (background-color . "white")))

;; (setq initial-frame-alist '((top . 0) (left . 0) (width . 96) (height . 74)))

;; Turn on transient and delete selection mode
(transient-mark-mode 1)
(delete-selection-mode 1)

;; Turn on line wrapping
(global-visual-line-mode 1)

;; Turn on CamelCase mode by default
;;(add-hook 'c-mode-hook (function (lambda () (c-subword-mode 1))))
;;(add-hook 'c++-mode-hook (function (lambda () (c-subword-mode 1))))

;; Turn on spell checker
;;(setq ispell-program-name "aspell")
;;(add-to-list 'exec-path "/usr/local/bin")
;;(setq ispell-dictionary-alist
;;      '((nil
;;	 "[A-Za-z]" "[^A-Za-z]" "[']" nil
;;	 ("-B" "-d" "english" "--dict-dir"
;;	  "/Library/Application Support/cocoAspell/aspell6-en-6.0-0")
;;	 nil iso-8859-1)))
;;(setq ispell-program-name "aspell"
;;      ispell-dictionary "english"
;;      ispell-dictionary-alist
;;      (let ((default '("[A-Za-z]" "[^A-Za-z]" "[']" nil
;;                       ("-B" "-d" "english" "--dict-dir"
;;                        "/Library/Application Support/cocoAspell/aspell6-en-6.0-0")
;;                       nil iso-8859-1)))
;;        `((nil ,@default)
;;          ("english" ,@default))))

;; ;; Turn on FlySpell for LaTeX by default
;; (add-hook          'c-mode-hook 'flyspell-prog-mode)
;; (add-hook         'sh-mode-hook 'flyspell-prog-mode)
;; (add-hook        'c++-mode-hook 'flyspell-prog-mode)
;; (add-hook       'ruby-mode-hook 'flyspell-prog-mode)
;; (add-hook      'cperl-mode-hook 'flyspell-prog-mode)
;; (add-hook     'python-mode-hook 'flyspell-prog-mode)
;; (add-hook   'autoconf-mode-hook 'flyspell-prog-mode)
;; (add-hook   'autotest-mode-hook 'flyspell-prog-mode)
;; (add-hook   'makefile-mode-hook 'flyspell-prog-mode)
;; (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)
;; (add-hook 'tex-mode-hook (function (lambda () (setq ispell-parser 'tex))))
;; (add-hook 'texinfo-mode
;; 	  '(lambda () (setq flyspell-generic-check-word-p
;; 			    'texinfo-mode-flyspell-verify)))
;; (add-hook 'change-log-mode-hook (lambda () (flyspell-mode 1)))
;; (add-hook       'text-mode-hook (lambda () (flyspell-mode 1)))

;; ;; Set Smooth Scrolling
;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
;; (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
;; (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
;; (setq scroll-step 1) ;; keyboard scroll one line at a time
;; (setq scroll-conservatively 10000) ;; Scroll one line at a time when cursor moves past the top or bottom
;; ;; (setq scroll-preserve-screen-position 't) ;; Maintains the cursor at the same screen position during scrolling 

;; ;; =============================================================================
;; ;; Add Packages and Turn On Modes
;; ;; =============================================================================

;; ;; Add marmalade functionality:
;; (require 'package)
;; (add-to-list 'package-archives 
;;     '("marmalade" .
;;       "http://marmalade-repo.org/packages/"))
;; (package-initialize)

;; ;; Add autocomplete package
;; (add-to-list 'load-path "~/.emacs.d/auto-complete-1.3.1/")
;; (require 'auto-complete-config)
;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete-1.3.1/ac-dict")
;; (ac-config-default)
;; (define-key global-map (kbd "<C-tab>") 'ac-fuzzy-complete)

;; ;; Turn on icicles for quickly getting information with shift-tab
;; (add-to-list 'load-path "~/.emacs.d/icicles")
;; (require 'icicles)
;; (icy-mode 1)
;; (setq icicle-expand-input-to-common-match-flag 0)
;; (setq icicle-search-replace-common-match-flag nil)
;; (setq icicle-match-highlight-minibuffer nil)
;; (setq icicle-current-candidate-highlight nil)

;; ;; Add python functionality
;; (require 'python-mode)

;; ;; Add Comint mode
;; (require 'comint)

;; ;; Add Viper mode so word forward and backward or windows style
;; (setq viper-mode nil)
;; (require 'viper)

;; ;; Add line numbering
;; (require 'linum)
;; (global-linum-mode 1)

;; ;; Turn on window saving mode for restoring window configs:
;; (winner-mode 1)


;; ;; =============================================================================
;; ;; LaTeX Functionality
;; ;; =============================================================================

;; (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)

;; (setq TeX-view-program-list
;;        '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %q")))

;; (setq TeX-view-program-selection '((output-pdf "Skim")))

;; (defun ddb/conf/latex/reftex ()
;;   (progn
;;     (turn-on-reftex)
;;     (reftex-set-cite-format 'default)
;;     (setq reftex-plug-into-AUCTeX t)))

;; (add-hook 'LaTeX-mode-hook 'ddb/conf/latex/reftex)

;; ;; =============================================================================
;; ;; Functions
;; ;; =============================================================================

;; (defun unfill-region-or-buffer ()
;;   "Unwrap hard-wrapped text in buffer or region."
;;   (interactive)
;;   (let ((fill-column most-positive-fixnum))
;;     (if (region-active-p)
;;         (fill-region (region-beginning) (region-end))
;;       (fill-region (point-min) (point-max)))))

;; ;; =============================================================================
;; ;; My custom key bindings
;; ;; =============================================================================

;; Make a new new minor mode for my key bindings
(defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")

;; ;; My custom cursor movements
;; (define-key my-keys-minor-mode-map (kbd "M-f") 'viper-forward-word)
;; (define-key my-keys-minor-mode-map (kbd "M-b") 'viper-backward-word)
;; (define-key my-keys-minor-mode-map (kbd "<s-right>") 'viper-forward-word)
;; (define-key my-keys-minor-mode-map (kbd "<s-left>") 'viper-backward-word)

;; ;; My buffer switching
;; (define-key my-keys-minor-mode-map (kbd "s-}") 'next-buffer)
;; (define-key my-keys-minor-mode-map (kbd "s-{") 'previous-buffer)

;; Add shortcuts for splitting and changing windows
(define-key my-keys-minor-mode-map (kbd "C-1") 'delete-other-windows)
(define-key my-keys-minor-mode-map (kbd "C-2") 'split-window-vertically)
(define-key my-keys-minor-mode-map (kbd "C-3") 'split-window-horizontally)
(define-key my-keys-minor-mode-map (kbd "C-4") 'other-window)

;; Add shortcuts for scrolling window one line at a time
(define-key my-keys-minor-mode-map (kbd "C->") 'scroll-up-line)
(define-key my-keys-minor-mode-map (kbd "C-<") 'scroll-down-line)

;; Bind regex forward and backward search to a easier keyboard commands:
(define-key my-keys-minor-mode-map (kbd "C-M-s") 'isearch-forward-regexp)
(define-key my-keys-minor-mode-map (kbd "C-M-r") 'isearch-backward-regexp)

;; Bind a key for compiling code:
(define-key my-keys-minor-mode-map (kbd "<f5>") 'compile) ;; Remember 'make -kC dir argument'
(define-key my-keys-minor-mode-map (kbd "S-<f5>") 'recompile)

;; Miscellaneous bindings:
(define-key my-keys-minor-mode-map "\M-g" 'goto-line)
(define-key my-keys-minor-mode-map [f9] 'shell)

;; Finish defining the mode and turn it on
(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  t " my-keys" 'my-keys-minor-mode-map)

(my-keys-minor-mode 1)

;; (defun my-minibuffer-setup-hook ()
;;   (my-keys-minor-mode 0))

;; (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)

;; ;; Comint mode key bindings:
;; (define-key comint-mode-map (kbd "M-") 'comint-next-input)
;; (define-key comint-mode-map (kbd "M-") 'comint-previous-input)
;; (define-key comint-mode-map [down] 'comint-next-matching-input-from-input)
;; (define-key comint-mode-map [up] 'comint-previous-matching-input-from-input)


;; ;; =============================================================================
;; ;; Other
;; ;; =============================================================================

;; ;; python-mode functionality
;; ;;(fset 'python-beginning-of-line
;; ;;   "\C-a\223\\w\C-b")

;; ;;(add-hook 'python-mode-hook (function (lambda () (define-key python-mode-map (kbd "M-a") 'python-beginning-of-line))))


;; ;; =============================================================================
;; ;; Custom added from Emacs
;; ;; =============================================================================

;; (custom-set-variables
;;  ;; custom-set-variables was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(TeX-command-list (quote (("TeX" "%(PDF)%(tex) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil (plain-tex-mode texinfo-mode ams-tex-mode) :help "Run plain TeX") ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil (latex-mode doctex-mode) :help "Run LaTeX") ("Makeinfo" "makeinfo %t" TeX-run-compile nil (texinfo-mode) :help "Run Makeinfo with Info output") ("Makeinfo HTML" "makeinfo --html %t" TeX-run-compile nil (texinfo-mode) :help "Run Makeinfo with HTML output") ("AmSTeX" "%(PDF)amstex %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil (ams-tex-mode) :help "Run AMSTeX") ("ConTeXt" "texexec --once --texutil %(execopts)%t" TeX-run-TeX nil (context-mode) :help "Run ConTeXt once") ("ConTeXt Full" "texexec %(execopts)%t" TeX-run-TeX nil (context-mode) :help "Run ConTeXt until completion") ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX") ("View" "open -a /Applications/Skim.app %s.pdf" TeX-run-discard-or-function t t :help "Run Viewer") ("Print" "%p" TeX-run-command t t :help "Print the file") ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command) ("File" "%(o?)dvips %d -o %f " TeX-run-command t t :help "Generate PostScript file") ("Index" "makeindex %s" TeX-run-command nil t :help "Create index file") ("Check" "lacheck %s" TeX-run-compile nil (latex-mode) :help "Check LaTeX file for correctness") ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document") ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files") ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files") ("Other" "" TeX-run-command t t :help "Run an arbitrary command"))))
;;  '(sentence-end-double-space nil))
;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  )
